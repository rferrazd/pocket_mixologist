import Resource from 'wise-api/lib/common/resource';
import ICreateSessionDTO from 'wise-api/lib/resources/session/dtos/ICreateSessionDTO';
import IListSessionDTO from 'wise-api/lib/resources/session/dtos/IListSessionDTO';
import IListSessionByUserDTO from 'wise-api/lib/resources/session/dtos/IListSessionByUserDTO';
import IJoinSessionDTO from 'wise-api/lib/resources/session/dtos/IJoinSessionDTO';
import IUpdateSessionDTO from 'wise-api/lib/resources/session/dtos/IUpdateSessionDTO';
import IJoinSessionResponse from 'wise-api/lib/resources/session/responses/IJoinSessionResponse';
import IStartConferenceDTO from 'wise-api/lib/resources/session/dtos/IStartConferenceDTO';
import IGetParticipantsOverviewResponse from 'wise-api/lib/resources/session/responses/IGetParticipantsOverviewResponse';
import ICreateSessionResponse from 'wise-api/lib/resources/session/responses/ICreateSessionResponse';
import IListSessionResponse from 'wise-api/lib/resources/session/responses/IListSessionResponse';
import IGetSessionResponse from 'wise-api/lib/resources/session/responses/IGetSessionResponse';
import IListSessionByUserResponse from 'wise-api/lib/resources/session/responses/IListSessionByUserResponse';
import IGetSessionPartsResponse from 'wise-api/lib/resources/session/responses/IGetSessionPartsResponse';
declare class Session extends Resource {
    private conference;
    private sessionCurrent;
    private domain;
    constructor(token?: string, url?: string, domain?: string);
    create(data: ICreateSessionDTO): Promise<ICreateSessionResponse>;
    get(session: string): Promise<IGetSessionResponse>;
    list(filters: IListSessionDTO): Promise<IListSessionResponse>;
    listByUser(filters: IListSessionByUserDTO): Promise<IListSessionByUserResponse>;
    update(session: string, data: IUpdateSessionDTO): Promise<void>;
    delete(session: string): Promise<void>;
    join(session: string, data: IJoinSessionDTO): Promise<IJoinSessionResponse>;
    startConference(session: string, options: IStartConferenceDTO): Promise<void>;
    getSessionPartCount(session: string): Promise<IGetParticipantsOverviewResponse>;
    countParts(session: string): Promise<IGetSessionPartsResponse>;
    stopConference(forEveryone?: boolean): Promise<void>;
    getNumberOfParticipants(): number;
    toogleLibras(): void;
    startRecording(): void;
    stopRecording(): void;
}
export default Session;
