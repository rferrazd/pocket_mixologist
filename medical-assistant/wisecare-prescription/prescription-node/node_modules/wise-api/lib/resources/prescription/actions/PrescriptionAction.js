"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const AppError_1 = __importDefault(require("../../../common/errors/AppError"));
const resource_1 = __importDefault(require("../../../common/resource"));
const buffer_1 = require("buffer");
class Plan extends resource_1.default {
    constructor(token, url) {
        super(token, url);
        this.url = `${this.url}/prescriptions`;
    }
    create(data) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request.post(`${this.url}`, data, { headers: { Authorization: this.token ? `Bearer ${this.token}` : '' } })
                .then((res) => res.data)
                .catch((err) => { throw new AppError_1.default(err.response.data, err.response.status); });
        });
    }
    createCustom(data) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request.post(`${this.url}/custom`, data, { headers: { Authorization: this.token ? `Bearer ${this.token}` : '', 'Content-Type': `multipart/form-data; boundary=${data.getBoundary()}` } })
                .then((res) => res.data)
                .catch((err) => { throw new AppError_1.default(err.response.data, err.response.status); });
        });
    }
    get(prescription) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request.get(`${this.url}/${prescription}`, { headers: { Authorization: this.token ? `Bearer ${this.token}` : '' } })
                .then((res) => res.data)
                .catch((err) => { throw new AppError_1.default(err.response.data, err.response.status); });
        });
    }
    list(data) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request.post(`${this.url}/list`, data, { headers: { Authorization: this.token ? `Bearer ${this.token}` : '' } })
                .then((res) => res.data)
                .catch((err) => { throw new AppError_1.default(err.response.data, err.response.status); });
        });
    }
    update(prescription, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request.patch(`${this.url}/${prescription}`, data, { headers: { Authorization: this.token ? `Bearer ${this.token}` : '' } })
                .then((res) => res.status === 204)
                .catch((err) => { throw new AppError_1.default(err.response.data, err.response.status); });
        });
    }
    delete(prescription) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request.delete(`${this.url}/${prescription}`, { headers: { Authorization: this.token ? `Bearer ${this.token}` : '' } })
                .then((res) => res.status === 204)
                .catch((err) => { throw new AppError_1.default(err.response.data, err.response.status); });
        });
    }
    listCertificates() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request.get('http://localhost:8791/api/certificates')
                .then((res) => res.data)
                .catch((err) => { throw new AppError_1.default(err.response.data, err.response.status); });
        });
    }
    signLocal(certificateId, dataToSign) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request.post('http://localhost:8791/api/sign', {
                certId: certificateId,
                algorithm: 'SHA256',
                dataToSignArray: [{
                        key: 1,
                        dataToSign,
                    }],
            })
                .then((res) => res.data)
                .catch((err) => { throw new AppError_1.default(err.response.data, err.response.status); });
        });
    }
    sign(prescription, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request.post(`${this.url}/${prescription}/SIGN`, data, { headers: { Authorization: this.token ? `Bearer ${this.token}` : '' } })
                .then((res) => res.status === 204)
                .catch((err) => { throw new AppError_1.default(err.response.data, err.response.status); });
        });
    }
    download(prescription) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request.get(`${this.url}/${prescription}/DOWNLOAD`, { headers: { Authorization: this.token ? `Bearer ${this.token}` : '' }, responseType: 'arraybuffer' })
                .then((res) => buffer_1.Buffer.from(res.data, 'base64'))
                .catch((err) => { console.log(err); throw new AppError_1.default(err.response && err.response.data ? err.response.data : 'Could not download file', err.response && err.response.status ? err.response.status : 500); });
        });
    }
    listVidaasCertificates(doc) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request.get(`${this.url}/vidaas/certificates`, { params: { doc }, headers: { Authorization: this.token ? `Bearer ${this.token}` : '' } })
                .then((res) => res.data)
                .catch((err) => { console.log(err); throw new AppError_1.default(err.response && err.response.data ? err.response.data : 'Could not download file', err.response && err.response.status ? err.response.status : 500); });
        });
    }
}
exports.default = Plan;
