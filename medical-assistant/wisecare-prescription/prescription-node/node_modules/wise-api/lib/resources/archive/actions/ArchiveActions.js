"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const form_data_1 = __importDefault(require("form-data"));
const AppError_1 = __importDefault(require("../../../common/errors/AppError"));
const resource_1 = __importDefault(require("../../../common/resource"));
class Archive extends resource_1.default {
    constructor(token, url) {
        super(token, url);
        this.url = `${this.url}/archives`;
    }
    sendFile(file, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const form = new form_data_1.default();
            if (data.org)
                form.append('org', data.org);
            if (data.orgUnit)
                form.append('orgUnit', data.orgUnit);
            if (data.session)
                form.append('session', data.session);
            if (data.type)
                form.append('type', data.type);
            form.append('filename', file);
            return this.request.post(`${this.url}`, form, {
                headers: Object.assign({ Authorization: this.token ? `Bearer ${this.token}` : '' }, form.getHeaders()),
                maxBodyLength: Infinity,
                maxContentLength: Infinity,
            })
                .then((res) => res.data)
                .catch((err) => { throw new AppError_1.default(err.response.data, err.response.status); });
        });
    }
    get(fileId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request.get(`${this.url}/${fileId}`, { headers: { Authorization: this.token ? `Bearer ${this.token}` : '' } })
                .then((res) => res.data)
                .catch((err) => { console.log(err); throw new AppError_1.default(err.response.data, err.response.status); });
        });
    }
    download(fileId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request.get(`${this.url}/${fileId}/download`, { headers: { Authorization: this.token ? `Bearer ${this.token}` : '' } })
                .then((res) => res.data)
                .catch((err) => { console.log(err); throw new AppError_1.default(err.response.data, err.response.status); });
        });
    }
}
exports.default = Archive;
