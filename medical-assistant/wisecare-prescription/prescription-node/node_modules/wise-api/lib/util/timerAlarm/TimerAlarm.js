"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const handlebars_1 = __importDefault(require("handlebars"));
class TimeAlarm {
    constructor(data) {
        this.enabled = true;
        this.isRecursive = false;
        this.timer = [];
        this.start = (minCounter) => __awaiter(this, void 0, void 0, function* () {
            const { default: Toastify } = yield Promise.resolve().then(() => __importStar(require('toastify-js')));
            minCounter = minCounter ? minCounter + 1 : 1;
            const minutes = this.seconds / 60;
            const recursiveSeconds = this.seconds * minCounter;
            const thisMinutes = Math.floor(recursiveSeconds / 60);
            const thisSeconds = recursiveSeconds % 60 < 10 ? `0${recursiveSeconds % 60}` : recursiveSeconds % 60;
            const thisTime = `${thisMinutes}:${thisSeconds}`;
            const template = this.customMessage ? handlebars_1.default.compile(this.customMessage) : handlebars_1.default.compile(`Tempo de Alerta: ${thisTime} ${thisMinutes === 1 ? 'minuto passado!' : 'minutos passados!'}`);
            const thisMessage = template({ minutes: thisMinutes, seconds: thisSeconds, time: thisTime });
            if (minutes > 0 && this.enabled) {
                const localTimer = setTimeout(() => {
                    Toastify({
                        text: thisMessage,
                        duration: 5000,
                        close: true,
                        gravity: 'top',
                        position: 'right',
                        stopOnFocus: true,
                        style: Object.assign({}, (this.customStyle || {})),
                    }).showToast();
                    if (this.isRecursive) {
                        this.start(minCounter);
                    }
                }, minutes * 60000);
                this.timer.push(localTimer);
            }
        });
        this.clear = () => {
            console.log('CLEANING SETTIMEOUT');
            this.enabled = false;
            if (this.timer.length) {
                this.timer.forEach((timer) => {
                    clearTimeout(timer);
                });
            }
        };
        this.isRecursive = data.isRecursive;
        this.seconds = data.seconds;
        this.customStyle = data.customStyle;
        this.customMessage = data.customMessage;
    }
}
exports.default = TimeAlarm;
