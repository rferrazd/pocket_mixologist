"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ImportJitsiFile_1 = __importDefault(require("./ImportJitsiFile"));
const ImportTimeAlarmCSS_1 = __importDefault(require("../timerAlarm/ImportTimeAlarmCSS"));
const default_1 = __importDefault(require("../../config/default"));
const TimerAlarm_1 = __importDefault(require("../timerAlarm/TimerAlarm"));
class JitsiMeet {
    constructor() {
        this.onLoad = () => {
            console.log('ON_CONFERENCE_LOADED');
            if (!this.timeAlarm && this.opts.timerAlert) {
                this.timeAlarm = new TimerAlarm_1.default(Object.assign({}, this.opts.timerAlert));
                this.timeAlarm.start();
            }
            if (this.opts.onLoad)
                this.opts.onLoad();
        };
        this.onClose = () => {
            console.log('ON_CONFERENCE_CLOSED');
            this.timeAlarm.clear();
            if (this.opts.onClose)
                this.opts.onClose();
        };
        this.closeConference = (forEveryone = false) => {
            console.log('CLOSE_CONFERENCE_METHOD');
            this.options.parentNode.innerHTML = '';
            if (forEveryone)
                this.executeCommand('endConference');
            if (this.opts.onClose)
                this.opts.onClose();
            this.timeAlarm.clear();
        };
    }
    startConference(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            this.opts = opts;
            const options = {
                parentNode: opts.parentNode,
                jwt: opts.jwt,
                roomName: opts.roomName,
                width: opts.width || 640,
                height: opts.height || 480,
                onload: this.onLoad,
                userInfo: Object.assign({}, opts.userInfo),
                configOverwrite: {
                    startWithAudioMuted: opts.startWithAudioMuted,
                    startWithVideoMuted: opts.startWithVideoMuted,
                    autoKnockLobby: true,
                    defaultLogoUrl: opts.logo,
                    logoImageUrl: opts.logo,
                    prejoinConfig: {
                        enabled: false,
                        hideDisplayName: true,
                        hideExtraJoinButtons: ['no-audio', 'by-phone'],
                    },
                    toolbarButtons: [...opts.buttons, 'select-background'],
                },
                interfaceConfigOverwrite: {
                    TOOLBAR_BUTTONS: [...opts.buttons, 'select-background'],
                    DEFAULT_WELCOME_PAGE_LOGO_URL: opts.logo,
                    DEFAULT_LOGO_URL: opts.logo,
                },
            };
            this.options = options;
            (0, ImportTimeAlarmCSS_1.default)().then(() => {
                console.log('Time Alarm CSS imported');
            });
            (0, ImportJitsiFile_1.default)(opts.domain).then((JitsiExternalApi) => {
                console.log('Jitsi External API: ', JitsiExternalApi);
                this.JitsiExternalApi = new JitsiExternalApi(opts.domain ? opts.domain : default_1.default.Meeting.domain, options);
                this.JitsiExternalApi.addEventListener('videoConferenceJoined', () => {
                    if (opts.userInfo && opts.userInfo.displayName)
                        this.JitsiExternalApi.executeCommand('displayName', opts.userInfo.displayName);
                    if (opts.userInfo && opts.userInfo.avatarUrl)
                        this.JitsiExternalApi.executeCommand('avatarUrl', opts.userInfo.avatarUrl);
                    else
                        this.JitsiExternalApi.executeCommand('avatarUrl', '');
                    if (opts.shareLink)
                        this.JitsiExternalApi.executeCommand('link', opts.shareLink);
                    if (opts.restricted)
                        this.JitsiExternalApi.executeCommand('toggleLobby', opts.restricted);
                    if (opts.recording)
                        this.JitsiExternalApi.executeCommand('startRecording', { mode: 'file' });
                });
                this.JitsiExternalApi.addEventListener('readyToClose', () => {
                    if (opts.onClose)
                        opts.onClose();
                    this.JitsiExternalApi.dispose();
                });
                this.JitsiExternalApi.addEventListener('participantLeft', () => {
                    if (opts.onParticipantLeft)
                        opts.onParticipantLeft();
                });
                this.JitsiExternalApi.addEventListener('errorOccurred', (data) => {
                    if (data.error.name === 'conference.connectionError.accessDenied' || data.error.name === 'conference.destroyed') {
                        this.JitsiExternalApi.dispose();
                        if (opts.onModeratorReject)
                            opts.onModeratorReject();
                    }
                    else if (opts.onError)
                        opts.onError(data);
                });
            });
        });
    }
    getNumberOfPart() {
        return this.JitsiExternalApi.getNumberOfParticipants();
    }
    executeCommand(command, data) {
        this.JitsiExternalApi.executeCommand(command, data);
    }
}
exports.default = JitsiMeet;
